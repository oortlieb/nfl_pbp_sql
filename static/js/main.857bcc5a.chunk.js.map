{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["RenderedResults","results","columns","values","RenderedResultsWrapper","type","onClick","queryResult","saveAs","Blob","queryResultToCSV","Table","map","c","idx","v","vIdx","col","colIdx","QueryEditor","onSubmit","formik","useFormik","initialValues","query","format","formatSQL","useCallback","setFieldValue","handleSubmit","options","mime","lineWrapping","lineNumbers","showCursorWhenSelecting","hintOptions","tables","plays","value","onBeforeChange","_editor","_data","ErrorIndicator","error","ErrorText","styled","div","color","table","borderCollapse","borderSpacing","textAlign","border","marginTop","lines","join","concat","r","App","useState","db","setDb","loadingError","setLoadingError","sqlError","setSQLError","setResults","currentQuery","setCurrentQuery","useEffect","initSqlJs","locateFile","then","SQL","fetch","res","arrayBuffer","ab","Database","Uint8Array","catch","e","exec","message","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.857bcc5a.chunk.js","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport initSqlJs, { Database, QueryExecResult } from \"sql.js\";\nimport { useFormik } from \"formik\";\nimport styled from \"@emotion/styled\";\nimport { format } from \"sql-formatter\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport { saveAs } from \"file-saver\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/sql/sql\";\n\nfunction App() {\n  const [db, setDb] = useState<Database | null>(null);\n  const [loadingError, setLoadingError] = useState(null);\n  const [sqlError, setSQLError] = useState<string | null>(null);\n  const [results, setResults] = useState<QueryExecResult[]>([]);\n  const [currentQuery, setCurrentQuery] = useState<string>(\"\");\n\n  useEffect(() => {\n    // fetch wasm file\n    initSqlJs({ locateFile: () => \"./sql-wasm.wasm\" }).then((SQL) => {\n      fetch(\"./pbp_2021.sqlite\")\n        .then((res) => res.arrayBuffer())\n        .then((ab) => setDb(new SQL.Database(new Uint8Array(ab))))\n        .catch((e) => setLoadingError(e));\n    });\n  }, []);\n\n  useEffect(() => {\n    if (db && currentQuery) {\n      try {\n        setResults(db?.exec(currentQuery));\n        setSQLError(null);\n      } catch (e) {\n        setResults([]);\n        setSQLError((e as Error).message);\n      }\n    }\n  }, [currentQuery, db]);\n\n  // if (error) return <pre>{error.toString()}</pre>;\n  // else if (!db) return <pre>Loading...</pre>;\n  // else return <SQLRepl db={db} />;\n\n  if (loadingError) {\n    return <div>Error: {JSON.stringify(loadingError)}</div>;\n  } else if (db === null) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n      <QueryEditor onSubmit={setCurrentQuery} />\n\n      {results[0] && <RenderedResults results={results[0]} />}\n      <div>{sqlError && <ErrorIndicator error={sqlError} />}</div>\n    </>\n  );\n}\n\nfunction RenderedResults({ results }: { results: QueryExecResult }) {\n  if (!results) {\n    return null;\n  }\n\n  const { columns, values } = results;\n  return (\n    <RenderedResultsWrapper>\n      <button type=\"button\" onClick={() => downloadCSV(results)}>\n        DOWNLOAD\n      </button>\n      <Table>\n        <tbody>\n          <tr>\n            {columns.map((c, idx) => (\n              <th key={idx}>{c}</th>\n            ))}\n          </tr>\n          {values.map((v, vIdx) => (\n            <tr key={vIdx}>\n              {v.map((col, colIdx) => (\n                <td key={colIdx}>{col}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </RenderedResultsWrapper>\n  );\n}\n\nfunction QueryEditor({ onSubmit }: { onSubmit: (s: string) => void }) {\n  const formik = useFormik({\n    initialValues: {\n      query: format(\n        \"select count(*) as 'sacks', formation from plays where is_sack = true group by formation\"\n      ),\n    },\n    onSubmit: (values) => onSubmit(values.query),\n  });\n\n  const formatSQL = useCallback(() => {\n    formik.setFieldValue(\"query\", format(formik.values.query));\n  }, [formik]);\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <CodeMirror\n        options={{\n          mime: \"text/x-sql\",\n          lineWrapping: true,\n          lineNumbers: true,\n          showCursorWhenSelecting: true,\n          hintOptions: {\n            tables: {\n              plays: [\"game_id\"],\n            },\n          },\n        }}\n        value={formik.values.query}\n        onBeforeChange={(_editor, _data, value) => {\n          formik.setFieldValue(\"query\", value);\n        }}\n      />\n      <button type=\"submit\">RUN</button>\n      <button type=\"button\" onClick={formatSQL}>\n        FORMAT\n      </button>\n    </form>\n  );\n}\n\nfunction ErrorIndicator({ error }: { error: string }) {\n  return (\n    <div>\n      <ErrorText>SQL Error!</ErrorText>\n      <ErrorText>{error}</ErrorText>\n    </div>\n  );\n}\n\nconst ErrorText = styled.div({\n  color: \"red\",\n});\n\nconst Table = styled.table({\n  borderCollapse: \"separate\",\n  borderSpacing: \"12px\",\n  textAlign: \"left\",\n  border: \"1px solid black\",\n});\n\nconst RenderedResultsWrapper = styled.div({\n  marginTop: \"12px\",\n});\n\nconst ROW_SEP = \"\\n\";\nconst COL_SEP = \"\\t\";\nfunction queryResultToCSV(queryResult: QueryExecResult) {\n  let lines = [queryResult.columns.join(COL_SEP)];\n  lines = lines.concat(queryResult.values.map((r) => r.join(COL_SEP)));\n\n  return lines.join(ROW_SEP);\n}\n\nfunction downloadCSV(queryResult: QueryExecResult) {\n  return saveAs(new Blob([queryResultToCSV(queryResult)]), \"download.tsv\");\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}