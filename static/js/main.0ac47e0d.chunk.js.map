{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["RenderedResults","results","columns","values","map","c","idx","v","vIdx","col","colIdx","QueryEditor","onSubmit","formik","useFormik","initialValues","query","handleSubmit","rows","cols","id","value","onChange","handleChange","App","useState","db","setDb","loadingError","setLoadingError","setResults","currentQuery","setCurrentQuery","useEffect","initSqlJs","locateFile","then","SQL","fetch","res","arrayBuffer","ab","Database","Uint8Array","catch","e","exec","JSON","stringify","style","border","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ycAwDA,SAASA,EAAT,GAAqE,IAA1CC,EAAyC,EAAzCA,QACzB,IAAKA,EACH,OAAO,KAFyD,IAK1DC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,OACjB,OACE,gCACE,kCACE,6BACGD,EAAQE,KAAI,SAACC,EAAGC,GAAJ,OACX,6BAAeD,GAANC,QAGZH,EAAOC,KAAI,SAACG,EAAGC,GAAJ,OACV,6BACGD,EAAEH,KAAI,SAACK,EAAKC,GAAN,OACL,6BAAkBD,GAATC,OAFJF,WAWnB,SAASG,EAAT,GAAuE,IAAhDC,EAA+C,EAA/CA,SACfC,EAASC,YAAU,CACvBC,cAAe,CACbC,MACE,4FAEJJ,SAAU,SAACT,GAAD,OAAYS,EAAST,EAAOa,UAGxC,OACE,uBAAMJ,SAAUC,EAAOI,aAAvB,UACE,8BACE,0BACEC,KAAM,GACNC,KAAM,GACNC,GAAG,QACHC,MAAOR,EAAOV,OAAOa,MACrBM,SAAUT,EAAOU,iBAGrB,4CAKSC,MAtGf,WAAgB,IAAD,EACOC,mBAA0B,MADjC,mBACNC,EADM,KACFC,EADE,OAE2BF,mBAAS,MAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGiBJ,mBAA4B,IAH7C,mBAGNxB,EAHM,KAGG6B,EAHH,OAI2BL,mBAAiB,IAJ5C,mBAINM,EAJM,KAIQC,EAJR,KA0Bb,OApBAC,qBAAU,WAERC,IAAU,CAAEC,WAAY,iBAAM,qBAAqBC,MAAK,SAACC,GACvDC,MAAM,qBACHF,MAAK,SAACG,GAAD,OAASA,EAAIC,iBAClBJ,MAAK,SAACK,GAAD,OAAQd,EAAM,IAAIU,EAAIK,SAAS,IAAIC,WAAWF,QACnDG,OAAM,SAACC,GAAD,OAAOhB,EAAgBgB,WAEjC,IAEHZ,qBAAU,WACJP,GAAMK,GACRD,EAAU,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAIoB,KAAKf,MAErB,CAACA,EAAcL,IAMdE,EACK,0CAAamB,KAAKC,UAAUpB,MACnB,OAAPF,EACF,6CAGP,qCACE,cAACf,EAAD,CAAaC,SAAUoB,IAEtB/B,EAAQ,IACP,qBAAKgD,MAAO,CAAEC,OAAQ,kBAAmBC,UAAW,IAApD,SACE,cAACnD,EAAD,CAAiBC,QAASA,EAAQ,OAGtC,8BACG8B,GACC,wDACuB,8BAAMA,aClCxBqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0ac47e0d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport initSqlJs, { Database, QueryExecResult } from \"sql.js\";\nimport { useFormik } from \"formik\";\n\nfunction App() {\n  const [db, setDb] = useState<Database | null>(null);\n  const [loadingError, setLoadingError] = useState(null);\n  const [results, setResults] = useState<QueryExecResult[]>([]);\n  const [currentQuery, setCurrentQuery] = useState<string>(\"\");\n\n  useEffect(() => {\n    // fetch wasm file\n    initSqlJs({ locateFile: () => \"./sql-wasm.wasm\" }).then((SQL) => {\n      fetch(\"./pbp_2021.sqlite\")\n        .then((res) => res.arrayBuffer())\n        .then((ab) => setDb(new SQL.Database(new Uint8Array(ab))))\n        .catch((e) => setLoadingError(e));\n    });\n  }, []);\n\n  useEffect(() => {\n    if (db && currentQuery) {\n      setResults(db?.exec(currentQuery));\n    }\n  }, [currentQuery, db]);\n\n  // if (error) return <pre>{error.toString()}</pre>;\n  // else if (!db) return <pre>Loading...</pre>;\n  // else return <SQLRepl db={db} />;\n\n  if (loadingError) {\n    return <div>Error: {JSON.stringify(loadingError)}</div>;\n  } else if (db === null) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n      <QueryEditor onSubmit={setCurrentQuery} />\n\n      {results[0] && (\n        <div style={{ border: \"1px solid black\", marginTop: 10 }}>\n          <RenderedResults results={results[0]} />\n        </div>\n      )}\n      <div>\n        {currentQuery && (\n          <div>\n            Showing results for: <pre>{currentQuery}</pre>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction RenderedResults({ results }: { results: QueryExecResult }) {\n  if (!results) {\n    return null;\n  }\n\n  const { columns, values } = results;\n  return (\n    <table>\n      <tbody>\n        <tr>\n          {columns.map((c, idx) => (\n            <th key={idx}>{c}</th>\n          ))}\n        </tr>\n        {values.map((v, vIdx) => (\n          <tr key={vIdx}>\n            {v.map((col, colIdx) => (\n              <td key={colIdx}>{col}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction QueryEditor({ onSubmit }: { onSubmit: (s: string) => void }) {\n  const formik = useFormik({\n    initialValues: {\n      query:\n        \"select count(*) as 'sacks', formation from plays where is_sack = true group by formation\",\n    },\n    onSubmit: (values) => onSubmit(values.query),\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <textarea\n          rows={10}\n          cols={80}\n          id=\"query\"\n          value={formik.values.query}\n          onChange={formik.handleChange}\n        />\n      </div>\n      <button>RUN</button>\n    </form>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}