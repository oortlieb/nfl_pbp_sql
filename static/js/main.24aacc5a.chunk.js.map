{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["EXAMPLE_QUERIES","desc","query","Home","to","DBViewerScreen","useSearchParams","dbURL","get","DBViewer","useState","db","setDb","loadingError","setLoadingError","sqlError","setSQLError","results","setResults","schemaQueryResult","setSchemaQueryResult","currentQuery","setCurrentQuery","useEffect","initSqlJs","locateFile","then","SQL","fetch","res","arrayBuffer","ab","Database","Uint8Array","catch","e","exec","message","JSON","stringify","className","QueryEditor","onSubmit","DBDescriber","RenderedResults","ErrorIndicator","error","columns","values","RenderedResultsWrapper","Table","map","c","idx","v","vIdx","col","colIdx","type","onClick","queryResult","saveAs","Blob","queryResultToTSV","href","hintOptions","tables","games","players","disableKeywords","completeSingle","completeOnSingleClick","cmOptions","mime","mode","name","extraKeys","hint","sql","lineWrapping","lineNumbers","showCursorWhenSelecting","formik","useFormik","initialValues","format","formatSQL","useCallback","setFieldValue","handleSubmit","options","value","onBeforeChange","editor","_data","showHint","ExampleQueries","onSelect","s","ErrorText","styled","div","color","table","textAlign","border","marginTop","maxWidth","boxSizing","lines","join","concat","r","length","rows","SQLiteTableDescription","columnsData","useMemo","columnDefns","substring","indexOf","lastIndexOf","trim","removeTrailingComma","split","replace","TypeIcon","App","basename","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24aacc5a.chunk.js","sourcesContent":["import { useState, useEffect, useCallback, useMemo } from \"react\";\nimport \"./App.css\";\nimport initSqlJs, { Database, QueryExecResult } from \"sql.js\";\nimport { useFormik } from \"formik\";\nimport styled from \"@emotion/styled\";\nimport { format } from \"sql-formatter\";\nimport { Editor, hint } from \"codemirror\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport { saveAs } from \"file-saver\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/sql/sql\";\nimport \"codemirror/addon/hint/show-hint.css\"; // without this css hints won't show\nimport \"codemirror/addon/hint/show-hint\";\nimport \"codemirror/addon/hint/sql-hint\";\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Routes,\n  useSearchParams,\n} from \"react-router-dom\";\nimport {\n  Disclosure,\n  DisclosureButton,\n  DisclosurePanel,\n} from \"@reach/disclosure\";\n\nconst EXAMPLE_QUERIES = [\n  {\n    desc: \"Most passing TD at home this year\",\n    query:\n      'select player_name, sum(passing_td) as \"passing td\" from player_games where at_home group by player_name having sum(passing_td) > 0 order by sum(passing_td) desc',\n  },\n  {\n    desc: \"Fantasy points scored by a team\",\n    query:\n      \"select team, sum(total_points) from player_games group by team order by sum(total_points) desc\",\n  },\n  {\n    desc: \"Fantasy points allowed by a team\",\n    query:\n      \"select player_opponent, sum(total_points) from player_games group by player_opponent order by sum(total_points) desc\",\n  },\n];\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/nfl_pbp_sql\">\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/db\" element={<DBViewerScreen />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nfunction Home() {\n  return (\n    <>\n      <Link to=\"/db?dbURL=ff_2021.sqlite\">FF data</Link>\n      <Link to=\"/db?dbURL=pbp_2021.sqlite\">NFL PBP data</Link>\n    </>\n  );\n}\n\ntype DBViewerProps = {\n  dbURL: string;\n};\n\ntype SQLiteColumnType = \"INT\" | \"TEXT\" | \"BOOLEAN\";\n\nfunction DBViewerScreen() {\n  const [searchParams] = useSearchParams();\n  const dbURL = searchParams.get(\"dbURL\");\n  return <DBViewer dbURL={`./${dbURL}`} />;\n}\n\nfunction DBViewer({ dbURL }: DBViewerProps) {\n  const [db, setDb] = useState<Database | null>(null);\n  const [loadingError, setLoadingError] = useState(null);\n  const [sqlError, setSQLError] = useState<string | null>(null);\n  const [results, setResults] = useState<QueryExecResult[]>([]);\n  const [schemaQueryResult, setSchemaQueryResult] = useState<QueryExecResult[]>(\n    []\n  );\n  const [currentQuery, setCurrentQuery] = useState<string>(\"\");\n\n  useEffect(() => {\n    // fetch wasm file\n    initSqlJs({ locateFile: () => \"./sql-wasm.wasm\" }).then((SQL) => {\n      fetch(dbURL)\n        .then((res) => res.arrayBuffer())\n        .then((ab) => setDb(new SQL.Database(new Uint8Array(ab))))\n        .catch((e) => setLoadingError(e));\n    });\n  }, [dbURL]);\n\n  useEffect(() => {\n    if (db) {\n      try {\n        setSchemaQueryResult(db?.exec(\"SELECT * FROM sqlite_schema\"));\n        setSQLError(null);\n      } catch (e) {\n        setResults([]);\n        setSQLError((e as Error).message);\n      }\n    }\n  }, [db]);\n\n  useEffect(() => {\n    if (db && currentQuery) {\n      try {\n        setResults(db?.exec(currentQuery));\n        setSQLError(null);\n      } catch (e) {\n        setResults([]);\n        setSQLError((e as Error).message);\n      }\n    }\n  }, [currentQuery, db]);\n\n  if (loadingError) {\n    return <div>Error: {JSON.stringify(loadingError)}</div>;\n  } else if (db === null) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <>\n      <div className=\"layout-grid\">\n        <div className=\"left-col-wrapper\">\n          <QueryEditor onSubmit={setCurrentQuery} />\n          <DBDescriber schemaQueryResult={schemaQueryResult} />\n        </div>\n\n        {results[0] && <RenderedResults results={results[0]} />}\n        {sqlError && (\n          <div>\n            <ErrorIndicator error={sqlError} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction RenderedResults({ results }: { results: QueryExecResult }) {\n  if (!results) {\n    return null;\n  }\n\n  const { columns, values } = results;\n  return (\n    <>\n      <div className=\"results-table-scroll-wrapper\">\n        <RenderedResultsWrapper>\n          <Table>\n            <tbody>\n              <tr>\n                {columns.map((c, idx) => (\n                  <th key={idx}>{c}</th>\n                ))}\n              </tr>\n              {values.map((v, vIdx) => (\n                <tr key={vIdx} className=\"result-row\">\n                  {v.map((col, colIdx) => (\n                    <td key={colIdx}>{col || 0}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </RenderedResultsWrapper>\n      </div>\n      <div />\n      <div>\n        {results && (\n          <button type=\"button\" onClick={() => downloadTSV(results)}>\n            Download TSV\n          </button>\n        )}\n      </div>\n      <div />\n      <div>\n        <div>\n          <div>\n            Data from{\" \"}\n            <a href=\"https://github.com/hvpkod/NFL-Data\">\n              https://github.com/hvpkod/NFL-Data\n            </a>\n          </div>\n          <div>\n            post on{\" \"}\n            <a href=\"https://www.reddit.com/r/fantasyfootball/comments/qmlcvm/how_about_some_raw_data/\">\n              reddit\n            </a>\n          </div>\n        </div>\n        <div></div>\n      </div>\n    </>\n  );\n}\n\nconst hintOptions = {\n  tables: {\n    games: [\"col_A\", \"col_B\", \"col_C\"],\n    players: [\"other_columns1\", \"other_columns2\"],\n  },\n  disableKeywords: true,\n  completeSingle: false,\n  completeOnSingleClick: false,\n};\n\nconst cmOptions = {\n  mime: \"text/x-sql\",\n  mode: { name: \"sql\" },\n  extraKeys: { \"Ctrl-Space\": \"autocomplete\" },\n  hint: hint.sql,\n  hintOptions,\n  lineWrapping: true,\n  lineNumbers: true,\n  showCursorWhenSelecting: true,\n};\n\nfunction QueryEditor({ onSubmit }: { onSubmit: (s: string) => void }) {\n  const formik = useFormik({\n    initialValues: {\n      query: format(EXAMPLE_QUERIES[0].query),\n    },\n    onSubmit: (values) => onSubmit(values.query),\n  });\n\n  const formatSQL = useCallback(() => {\n    formik.setFieldValue(\"query\", format(formik.values.query));\n  }, [formik]);\n\n  return (\n    <>\n      <form onSubmit={formik.handleSubmit}>\n        <CodeMirror\n          options={cmOptions}\n          value={formik.values.query}\n          onBeforeChange={(editor: Editor, _data, value) => {\n            formik.setFieldValue(\"query\", value);\n            editor.showHint(hintOptions);\n          }}\n        />\n        <div className=\"button-wrapper\">\n          <button type=\"submit\">Run Query</button>\n          <button type=\"button\" onClick={formatSQL}>\n            Format Query\n          </button>\n        </div>\n        <ExampleQueries\n          onSelect={(s: string) => formik.setFieldValue(\"query\", format(s))}\n        />\n      </form>\n    </>\n  );\n}\n\nfunction ErrorIndicator({ error }: { error: string }) {\n  return (\n    <div>\n      <ErrorText>SQL Error!</ErrorText>\n      <ErrorText>{error}</ErrorText>\n    </div>\n  );\n}\n\nconst ErrorText = styled.div({\n  color: \"red\",\n});\n\nconst Table = styled.table({\n  textAlign: \"center\",\n  border: \"1px solid black\",\n});\n\nconst RenderedResultsWrapper = styled.div({\n  marginTop: \"12px\",\n  maxWidth: \"100%\",\n  boxSizing: \"border-box\",\n});\n\nconst ROW_SEP = \"\\n\";\nconst COL_SEP = \"\\t\";\nfunction queryResultToTSV(queryResult: QueryExecResult) {\n  let lines = [queryResult.columns.join(COL_SEP)];\n  lines = lines.concat(queryResult.values.map((r) => r.join(COL_SEP)));\n\n  return lines.join(ROW_SEP);\n}\n\nfunction downloadTSV(queryResult: QueryExecResult) {\n  return saveAs(new Blob([queryResultToTSV(queryResult)]), \"download.tsv\");\n}\n\ntype DBDescriberProps = {\n  schemaQueryResult: QueryExecResult[];\n};\n\nfunction DBDescriber({ schemaQueryResult }: DBDescriberProps) {\n  if (schemaQueryResult.length < 1) {\n    return <div />;\n  }\n\n  const rows = schemaQueryResult[0].values.map(\n    ([_type, name, _tableName, _rootPage, sql]) => (\n      <SQLiteTableDescription\n        key={name as string}\n        name={name as string}\n        sql={sql as string}\n      />\n    )\n  );\n\n  return (\n    <div>\n      <h2>Table information</h2>\n      <div>{rows}</div>\n    </div>\n  );\n}\n\ntype SQLiteTableDescriptionProps = { name: string; sql: string };\n\nfunction SQLiteTableDescription({ name, sql }: SQLiteTableDescriptionProps) {\n  const columnsData = useMemo(() => {\n    const columnDefns = sql\n      .substring(sql.indexOf(\"(\") + 1, sql.lastIndexOf(\")\"))\n      .trim();\n\n    const removeTrailingComma = /,$/;\n    return columnDefns.split(\"\\n\").map((s) => {\n      return s.trim().replace(removeTrailingComma, \"\").split(\" \");\n    });\n  }, [sql]);\n\n  return (\n    <div>\n      <Disclosure>\n        <DisclosureButton>\n          <b>{name}</b>\n        </DisclosureButton>\n\n        <DisclosurePanel>\n          {columnsData.map((c: string[]) => (\n            <div key={c[0]}>\n              {c[0]} <TypeIcon type={c[1] as SQLiteColumnType} />\n            </div>\n          ))}\n        </DisclosurePanel>\n      </Disclosure>\n    </div>\n  );\n}\n\ntype TypeIconProps = {\n  type: SQLiteColumnType;\n};\n\nfunction TypeIcon({ type }: TypeIconProps) {\n  return <b>{type}</b>;\n}\n\nfunction ExampleQueries({ onSelect }: { onSelect: (s: string) => void }) {\n  return (\n    <div>\n      <h2>Example Queries</h2>\n      <div>\n        {EXAMPLE_QUERIES.map(({ desc, query }, idx) => (\n          <button\n            key={idx}\n            type=\"button\"\n            className=\"example-query\"\n            onClick={() => onSelect(query)}\n          >\n            {desc}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}